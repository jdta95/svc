// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// svclm_cpp
Rcpp::List svclm_cpp(const arma::vec& Y, const arma::mat& X, const arma::mat& coords, const arma::vec& Y_knots, const arma::mat& X_knots, const arma::mat& knots, const arma::mat& w_knots_start, const arma::vec& sigmasq_start, const arma::vec& a_sigmasq, const arma::vec& b_sigmasq, double tausq_start, double a_tausq, double b_tausq, const arma::vec& phi_start, const arma::vec& phi_lower, const arma::vec& phi_upper, const arma::vec& phi_proposal_sd_start, double phi_target_acceptance, unsigned int mcmc);
RcppExport SEXP _svc_svclm_cpp(SEXP YSEXP, SEXP XSEXP, SEXP coordsSEXP, SEXP Y_knotsSEXP, SEXP X_knotsSEXP, SEXP knotsSEXP, SEXP w_knots_startSEXP, SEXP sigmasq_startSEXP, SEXP a_sigmasqSEXP, SEXP b_sigmasqSEXP, SEXP tausq_startSEXP, SEXP a_tausqSEXP, SEXP b_tausqSEXP, SEXP phi_startSEXP, SEXP phi_lowerSEXP, SEXP phi_upperSEXP, SEXP phi_proposal_sd_startSEXP, SEXP phi_target_acceptanceSEXP, SEXP mcmcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_knots(Y_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_knots(X_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w_knots_start(w_knots_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmasq_start(sigmasq_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a_sigmasq(a_sigmasqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b_sigmasq(b_sigmasqSEXP);
    Rcpp::traits::input_parameter< double >::type tausq_start(tausq_startSEXP);
    Rcpp::traits::input_parameter< double >::type a_tausq(a_tausqSEXP);
    Rcpp::traits::input_parameter< double >::type b_tausq(b_tausqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_start(phi_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_lower(phi_lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_upper(phi_upperSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_proposal_sd_start(phi_proposal_sd_startSEXP);
    Rcpp::traits::input_parameter< double >::type phi_target_acceptance(phi_target_acceptanceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mcmc(mcmcSEXP);
    rcpp_result_gen = Rcpp::wrap(svclm_cpp(Y, X, coords, Y_knots, X_knots, knots, w_knots_start, sigmasq_start, a_sigmasq, b_sigmasq, tausq_start, a_tausq, b_tausq, phi_start, phi_lower, phi_upper, phi_proposal_sd_start, phi_target_acceptance, mcmc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_svc_svclm_cpp", (DL_FUNC) &_svc_svclm_cpp, 19},
    {NULL, NULL, 0}
};

RcppExport void R_init_svc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
